"""
Django settings for iot_project project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from google.oauth2 import service_account

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = os.getenv('SECRET_KEY_PROD', 'django-insecure-tazq&-pp20%ad!vfmz)gg4-c(iosne&&g7a$07^jau=ow#6r)#')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'True').lower() == 'true'

USE_SETTING_DEFAULT=os.getenv('SETTING_DEFAUT','True').lower()=='true'


if USE_SETTING_DEFAULT:
    ALLOWED_HOSTS=['localhost','127.0.0.1']
else:
    APP_HOST_STR = os.getenv('APP_HOST', 'localhost,127.0.0.1') # Lấy từ biến môi trường
    ALLOWED_HOSTS = [host.strip() for host in APP_HOST_STR.split(',') if host.strip()]
    ALLOWED_HOSTS.append(os.getenv('K_SERVICE', ''))
    ALLOWED_HOSTS = [host for host in ALLOWED_HOSTS if host]

    CSRF_TRUSTED_ORIGINS_STR = os.getenv('TRUSTED_CSRF_APP_HOST', 'http://localhost:8000,http://127.0.0.1:8000') # Lấy từ biến môi trường
    CSRF_TRUSTED_ORIGINS = [host.strip() for host in CSRF_TRUSTED_ORIGINS_STR.split(',') if host.strip()]
    CSRF_TRUSTED_ORIGINS = [host for host in CSRF_TRUSTED_ORIGINS if host]


# Application definition

INSTALLED_APPS = [
    'iot_app',
    'nested_admin',
    'django_extensions',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

if USE_SETTING_DEFAULT == False:
    INSTALLED_APPS.append('storages')



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'iot_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'iot_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if USE_SETTING_DEFAULT:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql', # Sử dụng PostgreSQL
            'NAME': os.getenv('POSTGRES_DB','mydjangodb'),
            'USER': os.getenv('POSTGRES_USER','dat'),
            'PASSWORD': os.getenv('POSTGRES_PASSWORD','111111'),
            'HOST': os.getenv('POSTGRES_HOST', '34.133.203.78'), 
            'PORT': os.getenv('POSTGRES_PORT', '5432'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

if USE_SETTING_DEFAULT:
    # TIME_ZONE = 'Asia/Ho_Chi_Minh'
    TIME_ZONE = 'UCT'
else:
    TIME_ZONE = os.getenv('TIME_ZONE','UCT')

USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
   
STATICFILES_DIRS=[
        BASE_DIR / "static"
    ]

if USE_SETTING_DEFAULT:

        MEDIA_ROOT=BASE_DIR / "uploads"
        MEDIA_URL="/files/"
    
else:        

    GS_QUERYSTRING_AUTH = False

    GS_BUCKET_NAME = os.getenv('GS_BUCKET_NAME','my-django-app-static-media-dat')
    GS_STATIC_LOCATION = 'static' # Thư mục trong bucket cho static files
    GS_MEDIA_LOCATION = 'media'   # Thư mục trong bucket cho media files

    GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
        os.path.join(BASE_DIR,  os.getenv('GOOGLE_APPLICATION_CREDENTIALS','gcp-sa-key.json'))
    )

    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
            "OPTIONS": {
                "bucket_name": GS_BUCKET_NAME,
                "location": "media",
                "default_acl": "publicRead",
                "credentials": GS_CREDENTIALS,
                "querystring_auth": False,
            },
        },
        "staticfiles": {
            "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
            "OPTIONS": {
                "bucket_name": GS_BUCKET_NAME,
                "location": "static",
                "default_acl": "publicRead",
                "credentials": GS_CREDENTIALS,
                "querystring_auth": False,
            },
        },
    }

    STATIC_ROOT = BASE_DIR / "staticfiles" # Vẫn cần cho collectstatic cục bộ
    MEDIA_ROOT = BASE_DIR / "uploads" # Vẫn cần cho tải lên tạm thời trước khi đẩy lên GCS

    STATIC_URL = f"https://storage.googleapis.com/{GS_BUCKET_NAME}/{GS_STATIC_LOCATION}/"
    MEDIA_URL = f"https://storage.googleapis.com/{GS_BUCKET_NAME}/{GS_MEDIA_LOCATION}/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

